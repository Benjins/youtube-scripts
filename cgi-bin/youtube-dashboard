#!/run/current-system/sw/bin/zsh

# Use zsh above because bash doesn't find the UTF-8 locales on NixOS which tmux needs

set -eu -o pipefail

function strip_trailing_empty_lines() {
	# https://stackoverflow.com/questions/7359527
	sed -e :a -e '/^\n*$/{$d;N;};/\n$/ba'
}

function html_escape() {
	# https://stackoverflow.com/a/12873723
	sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g'
}

function linkify_log() {
	sed -r \
		-e 's,^\[youtube\] (.{11}),[youtube] <a href="https://www.youtube.com/watch?v=\1" target="_blank">\1</a>,g' \
		-e 's,^Skipping (.{11}) because,Skipping <a href="https://www.youtube.com/watch?v=\1" target="_blank">\1</a> because,g' \
		-e 's,-(.{11})(\.jpg|\.annotations\.xml|\.info\.json|(\.f[0-9]+)?\.(webm|mp4|m4a)),-<a href="https://www.youtube.com/watch?v=\1" target="_blank">\1</a>\2,g' \
		-e 's,^\[youtube:playlist\] (.{24}):,[youtube:playlist] <a href="https://www.youtube.com/playlist?list=\1" target="_blank">\1</a>:,g' \
		-e 's,^(ERROR: .*)$,<span class="error">\1</span>,g' \
		-e 's,(^\[download\] Downloading video [0-9]+ of [0-9]+)$,<span class="download">\1</span>,g' \
		-e 's, of (~?)([\.0-9]+GiB) , of \1<span class="large-video-size">\2</span> ,g' \
		-e 's,^([‚îå‚îÇ‚îî].*)$,<span class="monospace">\1</span>,g'
}

function url_for_identifier() {
	if [[ $1 == UC?????????????????????? ]]; then
		url="https://www.youtube.com/channel/$1/videos"
	elif [[ $1 == PL* ]]; then
		url="https://www.youtube.com/playlist?list=$1"
	else
		url="https://www.youtube.com/user/$1/videos"
	fi
}

set +e
sessions=$(tmux list-sessions -F '#{session_created} #S' | grep -P '^\d+ YouTube-' | sort -rn)
set -e

echo "Content-Type: text/html; charset=utf-8

<html lang=\"en\">

<head>
<title>YouTube tasks</title>
<meta name=\"referrer\" content=\"no-referrer\">
<meta name=\"google\" content=\"notranslate\">
<style>

body {
	background-color: #ddd;
	color: black;
	font-family: system-ui, sans-serif;
	padding: 24px;
}

h1 {
	font-size: 16px;
	margin: 0;
}

a {
	color: black;
	text-decoration: none;
}

a:hover, a.blue {
	color: #0000EE;
}

.identifier {
	display: inline-block;
	min-width: 300px;
}

.monitored {
	display: inline-block;
	min-width: 120px;
}

.x-of {
	display: inline-block;
	min-width: 60px;
	text-align: right;
}

.toggle-area {
	display: inline-block;
	min-width: 500px;
	cursor: pointer;
}

.toggle-area:hover {
	background-color: #eee;
}

table {
	border-spacing: 0;
	border-collapse: collapse;
}

pre, table {
	display: inline-block;
	width: calc(100% - 12px);
	padding: 5px;
	margin: 0 0 1em 0;
	background-color: #fff;
}

pre, td {
	font-size: 13px;
	font-family: system-ui, sans-serif;
}

td {
	padding: 0 1em 0 0;
}

pre.task {
	height: 200px;
	overflow-y: scroll;
}

.monospace {
	font-size: 10pt;
	font-family: monospace;
}

span.error {
	color: #dd0000;
}

span.download {
	font-weight: bold;
}

span.large-video-size {
	font-weight: bold;
	background-color: purple;
	color: white;
}

</style>
</head>"

echo $sessions | wc -l
echo "downloaders running. Press F5 to <a class=\"blue\" href=\"/yt\">refresh</a> ü§∑Ô∏è. <kbd>n</kbd> and <kbd>a</kbd> keys hide/show task logs<br><br>"

typeset -A monitored_by_script
monitored_by_script=()
for i in $(ps w | grep -P -o 'wait-for-youtube-[t]ask .*' | cut -d ' ' -f 2); do
	monitored_by_script[$i]=1
done

tmux list-sessions -F '#{session_created} #S' | grep -P '^\d+ YouTube-' | sort -rn |\
while read line; do
	session_name=${line[(ws: :)2]}
	identifier=${session_name/YouTube-/}
	url_for_identifier "$identifier" # sets $url
	# Session may already be gone by the time we try to capture it
	contents=$(tmux capture-pane -p -t "$session_name" || echo -n "")
	set +e
	x_of_y=$({ echo -E "$contents" | grep -o -P "([0-9]+ of [0-9]+)$" | tail -n 1 } || echo -n "? of ?")
	x_of=${x_of_y[(ws: :)1]}
	of_y=${x_of_y[(ws: :)3]}
	set -e
	monitored="unmonitored"
	set +u
	if [[ $monitored_by_script[$identifier] == "1" ]]; then
		monitored="monitored"
	fi
	set -u
	echo "
		<h1>
			<a class=\"identifier\" name=\"$identifier\" href=\"$url\" target=\"_blank\">$identifier</a>
			<a href=\"/logs/dl/$identifier/?C=M;O=D\" target=\"_blank\">logs</a>,
			<span class=\"toggle-area\" onclick=\"toggle('download-$identifier')\">
				<span class=\"monitored\">$monitored</span>
				<span class=\"x-of\">$x_of</span>
				<span class=\"of-y\">of $of_y</span>
			</span>
		</h1>
	"
	echo "<pre class=\"task\" id=\"download-$identifier\">"
	echo -E "$contents" | strip_trailing_empty_lines | html_escape | linkify_log
	echo "</pre>"
done

set +e
scripts=$(ps w | grep -P '[b]in/grab-.*-youtube' | sed -r -e 's/^ +//' -e 's/ +/\t/g' | sort -k +5)
set -e

function linkify_lists() {
	sed -r 's,/home/at/lists/([-_0-9a-zA-Z]+),<a href="/lists/\1" class="blue" target="_blank">/home/at/lists/\1</a>,g'
}

function tabs_to_table() {
	sed -r -e 's,^,<tr><td>,' -e 's,$,</td></tr>,' -e 's,\t,</td><td>,g'
}

echo "<h1>"
echo $scripts | wc -l
echo "scripts running</h1>

<table>"
echo $scripts | html_escape | linkify_lists | tabs_to_table
echo "</table>"

echo "
<h1>Task distribution</h1>

<pre>"
processes=$(ps a -o command)
for i in scale{8..13} parhdd1 parssd1 spassd1 usassd{1..8} finssd1 finhdd1; do
	count=$(echo -E $processes | grep -c -P "^ssh -p 904 at@$i " || true)
	echo "$i\t$count"
done

echo "</pre>

<h1>$HOST free -m</h1>
<pre class=\"monospace\">"

free -m

echo "</pre>

<h1>$HOST df -hT</h1>
<pre class=\"monospace\">"

df -hT

echo "</pre>

<h1>$HOST du -d1 ~/YouTube | tail</h1>
<pre class=\"monospace\">"

du --block-size=\'1 -d1 ~/YouTube | sort -n | tail

echo "</pre>

<script>
for (const p of document.querySelectorAll('pre.task')) {
	p.scrollTop = p.scrollHeight;
}

function toggle(id) {
	const elem = document.getElementById(id);
	const visible = elem.style.display !== 'none';
	if (visible) {
		elem.style.display = 'none';
	} else {
		elem.style.display = 'inline-block';
	}
}

document.onkeypress = function(ev) {
	if(ev.ctrlKey || ev.altKey || ev.metaKey) {
		return;
	}
	// Add code here before this check for keys that require shift
	if (ev.shiftKey) {
		return;
	}
	if (ev.which == 97) { // a
		document.querySelectorAll('pre.task').forEach(function(el) {
			el.style.display = 'inline-block';
		});
	} else if(ev.which == 110) { // n
		document.querySelectorAll('pre.task').forEach(function(el) {
			el.style.display = 'none';
		});
	}
};
</script>

</html>
"
